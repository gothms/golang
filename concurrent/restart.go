package concurrent

/*
再聊Go并发编程的价值和精进之路

并发原语，初识时简单，深交时复杂，熟识时又觉简单
	初印象
		使用 Go 写并发程序很容易
	深入
		各种复杂的用法，各种潜在的坑
		陷入到“千头万绪”的境地
	坚持
		轻松地使用这些并发原语
		使用 Go 写并发程序很容易，使用 Go 写好并发程序很不容易
Bug 故事
	澳大利亚交易所（ASX）的新系统在上线后崩溃
		描述
			11 月 16 日中午，ASX 发布声明说，当天将休市，会在次日的正常时间重新开放
			官方给出的关闭原因是“局限于单个交易指令中交易多种证券（组合交易）的软件问题，导致了市场数据不准确。”
		分析
			简单地推断出是“单个指令中交易多种证券的问题”，大概率是一个并发问题的 Bug
			虽然经过一天的排查和修复，第二天这个交易所就恢复上线了。但是，耽误一天的时间，损失也是非常大的
		类似的软件 Bug
			尤其是并发问题的 Bug，即使经过很长时间的测试，也不一定能被触发和发现
			可是一旦出现，就可能是一个一级的 Bug
	1997 年 7 月，NASA 的 Mars Pathfinder（火星探路者）在降落火星表面后不久，就因并发软件中的一个缺陷受到了威胁
		优先级反转的并发 Bug
			这是在飞行前的测试中发现的，但因为它只发生在某些没有预料到的重载条件下，所以被给予了较低的优先级
			但是，飞船开始采集气象数据的时候，它所使用的 vxWorks 操作系统就出现了问题，不断地重启
			这是经典的优先级反转的并发 Bug
		解决
			幸好工程师上传了一小段 C 语言程序给飞船，在运行的时候，将优先级继承的互斥标志从 false 改成了 true，才成功地解决了这个 Bug
			这次人为的忽视，险些酿成惨剧
怎么在编写 Go 程序时，避免并发编程的 Bug
	1. 全面地掌握 Go 并发编程的知识，不遗漏任何的知识点
	2. 熟悉每一个并发原语的功能和实现，在面对并发场景时，能够高效地选出最适合的并发原语
	3. 多看看别人踩的坑，避免自己再掉进相同的坑里

知识导图：Go 并发编程的知识广、内容深，需要定期复习
	根据知识导图，梳理知识主线，从而高效地复习
	对照图中核心要点，回顾重要内容，感觉比较陌生的地方，及时回顾
	可以做摘录，写上收获和思考。学习过不等于能输出
Go 并发模型和调度
	可以搜索关键字“golang gpm schedule”
	推荐重点读一读欧长坤的《Go 语言原本》的 并发调度，这一篇的逻辑非常顺畅，能看出非常多的经验
	https://golang.design/under-the-hood/zh-cn/part2runtime/ch06sched/
书籍推荐
	Concurrency in Go
		第一本全面介绍 Go 并发编程的图书
		书中介绍了并发编程的背景知识、常见的原语和并发模式
		书里对 Channel 的精髓介绍，比如 Channel 是粘合 goroutine 的胶水，而 select 是粘合 Channel 的胶水
	Go 官方博客列出的一些技术分享
		比如Go Concurrency Patterns、Advanced Go Concurrency Patterns
		https://www.youtube.com/watch?v=f6kdp27TYZs
		https://www.youtube.com/watch?v=QDDwwePbDtw

restart
	第一，开放的心态，可以拓展你的人生边界
		一个人衰老的标志，不是指他的容貌经历了太多岁月的刻画，而是他的内心封闭了，不再接收新的知识、新的事物
		我们应该把核心精力用在眼下有价值的事情上，在自己擅长的领域里深耕
		但是更要相信，开放心会让你的人生与众不同
		如果你碰见了新技术的发展，即使不需要深入地学习，也要尽量花时间去了解一下，也许这些新的东西，就是你人生的转折点
	第二，无数人想要你的注意力，但只有你能决定你把它放在哪里
		这个时代是信息爆炸的时代，其实，信息爆炸就意味着千万的信息发送者想要占用你的注意力
		你一定要保持谨慎，不要毫无感知地把你的时间扔给无价值、无意义的信息
		如果保持开放的心态是让你延伸注意力的触角，那么对信息保持谨慎，就是让你收缩注意力的触角，但这两者并不矛盾，因为侧重点不同
		“延伸”还是“收缩”，取决于你自己想要拥有的人生的样子，只有你能决定
		重要的是提醒自己，要开放，也要谨慎
*/
