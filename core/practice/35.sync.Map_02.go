package practice

/*
并发安全字典sync.Map (下)

知识扩展
问题 1：怎样保证并发安全字典中的键和值的类型正确性？（方案二）
	第二种方案，封装的结构体类型的所有方法，都可以与sync.Map类型的方法完全一致（包括方法名称和方法签名）
		前提
			需要添加一些做类型检查的代码
			另外，这样并发安全字典的键类型和值类型，必须在初始化的时候就完全确定
			并且，这种情况下必须先要保证键的类型是可比较的
		示例
			type ConcurrentMap struct {
				m         sync.Map
				keyType   reflect.Type
				valueType reflect.Type
			}
		ConcurrentMap类型代表的是可自定义键类型和值类型的并发安全字典
			字段keyType和valueType分别用于保存键类型和值类型。这两个字段的类型都是reflect.Type，为反射类型
			这个类型可以代表 Go 语言的任何数据类型。并且，这个类型的值也非常容易获得：通过调用reflect.TypeOf函数并把某个样本值传入即可
	实现：demo72.go
		由于Store方法没有结果声明，所以在参数值有问题的时候，它无法通过比较平和的方式告知调用方。不过，这也是符合Store方法的原本含义的
		如果你不想这么做，就需要为Store方法添加一个error类型的结果
		且，在发现参数值类型不正确的时候，让它直接返回相应的error类型值，而不是引发 panic
	小结
		第一种方案适用于我们可以完全确定键和值具体类型的情况
			可以利用 Go 语言编译器去做类型检查，并用类型断言表达式作为辅助
			存在一个很明显的缺陷，那就是无法灵活地改变字典的键和值的类型
			一旦需求出现多样化，编码的工作量就会随之而来
		在第二种方案中，无需在程序运行之前就明确键和值的类型，只要在初始化并发安全字典的时候，动态地给定它们就可以了
			主要需要用到reflect包中的函数和数据类型，外加一些简单的判等操作
			缺点是，反射操作或多或少都会降低程序的性能
问题 2：并发安全字典如何做到尽量避免使用锁？
	原理
		sync.Map类型在内部使用了大量的原子操作来存取键和值，并使用了两个原生的map作为存储介质
		这两个字典在存储键和值的时候都只会存入它们的某个指针，而不是基本值
	read atomic.Pointer[readOnly]
		其中一个原生map被存在了sync.Map的read字段中，该字段是sync/atomic.Value类型的
		这个原生字典可以被看作一个快照，它总会在条件满足时，去重新保存所属的sync.Map值中包含的所有键值对
		它虽然不会增减其中的键，但却允许变更其中的键所对应的值
		所以，它并不是传统意义上的快照，它的只读特性只是对于其中键的集合而言的
	read 原理
		由read字段的类型可知，sync.Map在替换只读字典的时候根本用不着锁
		另外，这个只读字典在存储键值对的时候，还在值之上封装了一层
		它先把值转换为了unsafe.Pointer类型的值，然后再把后者封装，并储存在其中的原生字典中
		如此一来，在变更某个键所对应的值的时候，就也可以使用原子操作了
	dirty map[any]*entry
		sync.Map中的另一个原生字典由它的dirty字段代表
		它存储键值对的方式与read字段中的原生字典一致，它的键类型也是interface{}，并且同样是把值先做转换和封装后再进行储存的
		注意，脏字典和只读字典如果都存有同一个键值对，那么这里的两个键指的肯定是同一个基本值，对于两个值来说也是如此
	查找
		sync.Map在查找指定的键所对应的值的时候，总会先去只读字典中寻找，并不需要锁定互斥锁
		只有当确定“只读字典中没有，但脏字典中可能会有这个键”的时候，它才会在锁的保护下去访问脏字典
	存储
		sync.Map在存储键值对的时候，只要只读字典中已存有这个键，并且该键值对未被标记为“已删除”，就会把新值存到里面并直接返回，这种情况下也不需要用到锁
		否则，它才会在锁的保护下把键值对存储到脏字典中。这个时候，该键值对的“已删除”标记会被抹去
	逻辑删除
		只有当一个键值对应该被删除，但却仍然存在于只读字典中的时候，才会被用标记为“已删除”的方式进行逻辑删除，而不会直接被物理删除
		这种情况会在重建脏字典以后的一段时间内出现。不过，过不了多久，它们就会被真正删除掉
		在查找和遍历键值对的时候，已被逻辑删除的键值对永远会被无视
	删除
		sync.Map会先去检查只读字典中是否有对应的键
		如果没有，脏字典中可能有，那么它就会在锁的保护下，试图从脏字典中删掉该键值对
		最后，sync.Map会把该键值对中指向值的那个指针置为nil，这是另一种逻辑删除的方式
	只读字典和脏字典之间是会互相转换的
		在脏字典中查找键值对次数足够多的时候，sync.Map会把脏字典直接作为只读字典，保存在它的read字段中
		然后把代表脏字典的dirty字段的值置为nil
		在这之后，一旦再有新的键值对存入，它就会依据只读字典去重建脏字典
		这个时候，它会把只读字典中已被逻辑删除的键值对过滤掉
		理所当然，这些转换操作肯定都需要在锁的保护下进行
	小结
		sync.Map的只读字典和脏字典中的键值对集合并不是实时同步的，它们在某些时间段内可能会有不同
		由于只读字典中键的集合不能被改变，所以其中的键值对有时候可能是不全的
		相反，脏字典中的键值对集合总是完全的，并且其中不会包含已被逻辑删除的键值对
	适用场景
		在读操作有很多但写操作却很少的情况下，并发安全字典的性能往往会更好
		在几个写操作当中，新增键值对的操作对并发安全字典的性能影响是最大的，其次是删除操作，最后才是修改操作
		如果被操作的键值对已经存在于sync.Map的只读字典中，并且没有被逻辑删除，那么修改它并不会使用到锁，对其性能的影响就会很小

思考
	关于保证并发安全字典中的键和值的类型正确性，你还能想到其他的方案吗？
*/
