package modes

/*
Go语言反射机制
	官方文章：
		The Laws of Reflection：https://blog.golang.org/laws-of-reflection

	1.泛型编程：
		主要解决问题：
			因为静态类型语言有类型，所以相关的算法或是对数据处理的程序会因为类型不同而需要复制一份
			这会导致数据类型和算法功能耦合
		泛型编程在写代码时，不用关心处理数据的类型，只需要关心相关的处理逻辑
		泛型编程是静态语言中非常非常重要的特性，如果没有泛型，就很难做到多态，也很难完成抽象，导致代码冗余量很大
	2.Go语言的类型检查有两种技术
		Type Assert
		Reflection
	3.Type Assert
		variable, error := 变量.(type)
		variable：被转好的类型
		error：能否转换
	4.Reflection
	5.Go Generator
		C++ 的编译器会在编译时分析代码，根据不同的变量类型来自动化生成相关类型的函数或类，在 C++ 里，叫模板的具体化
			这个技术是编译时问题，所以不需要在运行时进行任何的类型识别
		Go 也可以使用这种技术，只是 Go 的编译器不会帮你干，需要你自己动手

		Go 的代码生成，需要三点：
			1)一个函数模板，在里面设置好相应的占位符
			2)一个脚本，用于按规则来替换文本并生成新的代码
			3)一行注释代码
*/
